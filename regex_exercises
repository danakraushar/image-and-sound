{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# 1.1 H&M\n",
    "Open up hm.csv from the scraped directory. I want four new columns:\n",
    "\n",
    "price_original, the original price, one of the new price\n",
    "price_discounted, the discounted price\n",
    "pct_discount, the percent discount\n",
    "article_id, the article id (from the url)\n",
    "Save as hm_cleaned.csv.\n",
    "\n",
    "Note: When you look at it, it... won't look right. I don't know why, pandas is weird. Look at the price column by itself using df['price'] before you write your regex."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 83,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "'name,price,url\\nWashed Linen Duvet Cover Set,$59.99 $129,http://www.hm.com/us/product/13472?article=13472-N\\nCandle in Glass Jar,$6.99 $17.99,http://www.hm.com/us/product/35079?article=35079-D\\nGlittery Cushion Cover,$7.99 $17.99,http://www.hm.com/us/product/72462?article=72462-A\\nTextured-weave Cushion Cover,$6.99 $12.99,http://www.hm.com/us/product/58926?article=58926-C\\nStoneware Bowl,$17.99 $24.99,http://www.hm.com/us/product/74242?article=74242-A\\nSlub-weave Cushion Cover,$3.99 $9.99,http://www.h'"
      ]
     },
     "execution_count": 83,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "contents = open(\"scraped/hm.csv\").read()\n",
    "contents[0:500]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {},
   "outputs": [],
   "source": [
    "import pandas as pd\n",
    "df_hm = pd.read_csv(\"scraped/hm.csv\")\n",
    "df_hm.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 106,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style>\n",
       "    .dataframe thead tr:only-child th {\n",
       "        text-align: right;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: left;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>name</th>\n",
       "      <th>price</th>\n",
       "      <th>url</th>\n",
       "      <th>price_original</th>\n",
       "      <th>price_discounted</th>\n",
       "      <th>pct_discount</th>\n",
       "      <th>article_id</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>Washed Linen Duvet Cover Set</td>\n",
       "      <td>$59.99 $129</td>\n",
       "      <td>http://www.hm.com/us/product/13472?article=134...</td>\n",
       "      <td>$129</td>\n",
       "      <td>$59.99</td>\n",
       "      <td>53.50</td>\n",
       "      <td>13472-N</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>Candle in Glass Jar</td>\n",
       "      <td>$6.99 $17.99</td>\n",
       "      <td>http://www.hm.com/us/product/35079?article=350...</td>\n",
       "      <td>$17.99</td>\n",
       "      <td>$6.99</td>\n",
       "      <td>61.15</td>\n",
       "      <td>35079-D</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>Glittery Cushion Cover</td>\n",
       "      <td>$7.99 $17.99</td>\n",
       "      <td>http://www.hm.com/us/product/72462?article=724...</td>\n",
       "      <td>$17.99</td>\n",
       "      <td>$7.99</td>\n",
       "      <td>55.59</td>\n",
       "      <td>72462-A</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>Textured-weave Cushion Cover</td>\n",
       "      <td>$6.99 $12.99</td>\n",
       "      <td>http://www.hm.com/us/product/58926?article=589...</td>\n",
       "      <td>$12.99</td>\n",
       "      <td>$6.99</td>\n",
       "      <td>46.19</td>\n",
       "      <td>58926-C</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>Stoneware Bowl</td>\n",
       "      <td>$17.99 $24.99</td>\n",
       "      <td>http://www.hm.com/us/product/74242?article=742...</td>\n",
       "      <td>$24.99</td>\n",
       "      <td>$17.99</td>\n",
       "      <td>28.01</td>\n",
       "      <td>74242-A</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>Slub-weave Cushion Cover</td>\n",
       "      <td>$3.99 $9.99</td>\n",
       "      <td>http://www.hm.com/us/product/70965?article=709...</td>\n",
       "      <td>$9.99</td>\n",
       "      <td>$3.99</td>\n",
       "      <td>60.06</td>\n",
       "      <td>70965-D</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>Braided Cushion Cover</td>\n",
       "      <td>$7.99 $17.99</td>\n",
       "      <td>http://www.hm.com/us/product/62818?article=628...</td>\n",
       "      <td>$17.99</td>\n",
       "      <td>$7.99</td>\n",
       "      <td>55.59</td>\n",
       "      <td>62818-B</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>Jacquard-weave Cushion Cover</td>\n",
       "      <td>$7.99 $17.99</td>\n",
       "      <td>http://www.hm.com/us/product/69163?article=691...</td>\n",
       "      <td>$17.99</td>\n",
       "      <td>$7.99</td>\n",
       "      <td>55.59</td>\n",
       "      <td>69163-B</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>Scented Candle in Glass Holder</td>\n",
       "      <td>$9.99 $17.99</td>\n",
       "      <td>http://www.hm.com/us/product/40910?article=409...</td>\n",
       "      <td>$17.99</td>\n",
       "      <td>$9.99</td>\n",
       "      <td>44.47</td>\n",
       "      <td>40910-C</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9</th>\n",
       "      <td>2-pack Curtain Panels</td>\n",
       "      <td>$27.99 $34.99</td>\n",
       "      <td>http://www.hm.com/us/product/69699?article=696...</td>\n",
       "      <td>$34.99</td>\n",
       "      <td>$27.99</td>\n",
       "      <td>20.01</td>\n",
       "      <td>69699-B</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>10</th>\n",
       "      <td>Porcelain Cup</td>\n",
       "      <td>$2.99 $5.99</td>\n",
       "      <td>http://www.hm.com/us/product/76916?article=769...</td>\n",
       "      <td>$5.99</td>\n",
       "      <td>$2.99</td>\n",
       "      <td>50.08</td>\n",
       "      <td>76916-A</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>11</th>\n",
       "      <td>Cotton Canvas Cushion Cover</td>\n",
       "      <td>$2.99 $5.99</td>\n",
       "      <td>http://www.hm.com/us/product/68473?article=684...</td>\n",
       "      <td>$5.99</td>\n",
       "      <td>$2.99</td>\n",
       "      <td>50.08</td>\n",
       "      <td>68473-C</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>12</th>\n",
       "      <td>Color-block Cushion Cover</td>\n",
       "      <td>$9.99 $12.99</td>\n",
       "      <td>http://www.hm.com/us/product/74498?article=744...</td>\n",
       "      <td>$12.99</td>\n",
       "      <td>$9.99</td>\n",
       "      <td>23.09</td>\n",
       "      <td>74498-A</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>13</th>\n",
       "      <td>King/Queen Duvet Cover Set</td>\n",
       "      <td>$39.99 $49.99</td>\n",
       "      <td>http://www.hm.com/us/product/41512?article=415...</td>\n",
       "      <td>$49.99</td>\n",
       "      <td>$39.99</td>\n",
       "      <td>20.00</td>\n",
       "      <td>41512-E</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>14</th>\n",
       "      <td>Star-print Duvet Cover Set</td>\n",
       "      <td>$39.99 $49.99</td>\n",
       "      <td>http://www.hm.com/us/product/76727?article=767...</td>\n",
       "      <td>$49.99</td>\n",
       "      <td>$39.99</td>\n",
       "      <td>20.00</td>\n",
       "      <td>76727-A</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>15</th>\n",
       "      <td>Faux Fur Seat Cushion</td>\n",
       "      <td>$7.99 $17.99</td>\n",
       "      <td>http://www.hm.com/us/product/76977?article=769...</td>\n",
       "      <td>$17.99</td>\n",
       "      <td>$7.99</td>\n",
       "      <td>55.59</td>\n",
       "      <td>76977-A</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>16</th>\n",
       "      <td>Patterned Duvet Cover Set</td>\n",
       "      <td>$19.99 $29.99</td>\n",
       "      <td>http://www.hm.com/us/product/73369?article=733...</td>\n",
       "      <td>$29.99</td>\n",
       "      <td>$19.99</td>\n",
       "      <td>33.34</td>\n",
       "      <td>73369-A</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>17</th>\n",
       "      <td>Patterned Mug</td>\n",
       "      <td>$2.99 $5.99</td>\n",
       "      <td>http://www.hm.com/us/product/59417?article=594...</td>\n",
       "      <td>$5.99</td>\n",
       "      <td>$2.99</td>\n",
       "      <td>50.08</td>\n",
       "      <td>59417-D</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>18</th>\n",
       "      <td>Metal Storage Box</td>\n",
       "      <td>$7.99 $17.99</td>\n",
       "      <td>http://www.hm.com/us/product/76797?article=767...</td>\n",
       "      <td>$17.99</td>\n",
       "      <td>$7.99</td>\n",
       "      <td>55.59</td>\n",
       "      <td>76797-A</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>19</th>\n",
       "      <td>Metal Tray</td>\n",
       "      <td>$14.99 $24.99</td>\n",
       "      <td>http://www.hm.com/us/product/76794?article=767...</td>\n",
       "      <td>$24.99</td>\n",
       "      <td>$14.99</td>\n",
       "      <td>40.02</td>\n",
       "      <td>76794-A</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                              name          price  \\\n",
       "0     Washed Linen Duvet Cover Set    $59.99 $129   \n",
       "1              Candle in Glass Jar   $6.99 $17.99   \n",
       "2           Glittery Cushion Cover   $7.99 $17.99   \n",
       "3     Textured-weave Cushion Cover   $6.99 $12.99   \n",
       "4                   Stoneware Bowl  $17.99 $24.99   \n",
       "5         Slub-weave Cushion Cover    $3.99 $9.99   \n",
       "6            Braided Cushion Cover   $7.99 $17.99   \n",
       "7     Jacquard-weave Cushion Cover   $7.99 $17.99   \n",
       "8   Scented Candle in Glass Holder   $9.99 $17.99   \n",
       "9            2-pack Curtain Panels  $27.99 $34.99   \n",
       "10                   Porcelain Cup    $2.99 $5.99   \n",
       "11     Cotton Canvas Cushion Cover    $2.99 $5.99   \n",
       "12       Color-block Cushion Cover   $9.99 $12.99   \n",
       "13      King/Queen Duvet Cover Set  $39.99 $49.99   \n",
       "14      Star-print Duvet Cover Set  $39.99 $49.99   \n",
       "15           Faux Fur Seat Cushion   $7.99 $17.99   \n",
       "16       Patterned Duvet Cover Set  $19.99 $29.99   \n",
       "17                   Patterned Mug    $2.99 $5.99   \n",
       "18               Metal Storage Box   $7.99 $17.99   \n",
       "19                      Metal Tray  $14.99 $24.99   \n",
       "\n",
       "                                                  url price_original  \\\n",
       "0   http://www.hm.com/us/product/13472?article=134...           $129   \n",
       "1   http://www.hm.com/us/product/35079?article=350...         $17.99   \n",
       "2   http://www.hm.com/us/product/72462?article=724...         $17.99   \n",
       "3   http://www.hm.com/us/product/58926?article=589...         $12.99   \n",
       "4   http://www.hm.com/us/product/74242?article=742...         $24.99   \n",
       "5   http://www.hm.com/us/product/70965?article=709...          $9.99   \n",
       "6   http://www.hm.com/us/product/62818?article=628...         $17.99   \n",
       "7   http://www.hm.com/us/product/69163?article=691...         $17.99   \n",
       "8   http://www.hm.com/us/product/40910?article=409...         $17.99   \n",
       "9   http://www.hm.com/us/product/69699?article=696...         $34.99   \n",
       "10  http://www.hm.com/us/product/76916?article=769...          $5.99   \n",
       "11  http://www.hm.com/us/product/68473?article=684...          $5.99   \n",
       "12  http://www.hm.com/us/product/74498?article=744...         $12.99   \n",
       "13  http://www.hm.com/us/product/41512?article=415...         $49.99   \n",
       "14  http://www.hm.com/us/product/76727?article=767...         $49.99   \n",
       "15  http://www.hm.com/us/product/76977?article=769...         $17.99   \n",
       "16  http://www.hm.com/us/product/73369?article=733...         $29.99   \n",
       "17  http://www.hm.com/us/product/59417?article=594...          $5.99   \n",
       "18  http://www.hm.com/us/product/76797?article=767...         $17.99   \n",
       "19  http://www.hm.com/us/product/76794?article=767...         $24.99   \n",
       "\n",
       "   price_discounted  pct_discount article_id  \n",
       "0            $59.99         53.50    13472-N  \n",
       "1             $6.99         61.15    35079-D  \n",
       "2             $7.99         55.59    72462-A  \n",
       "3             $6.99         46.19    58926-C  \n",
       "4            $17.99         28.01    74242-A  \n",
       "5             $3.99         60.06    70965-D  \n",
       "6             $7.99         55.59    62818-B  \n",
       "7             $7.99         55.59    69163-B  \n",
       "8             $9.99         44.47    40910-C  \n",
       "9            $27.99         20.01    69699-B  \n",
       "10            $2.99         50.08    76916-A  \n",
       "11            $2.99         50.08    68473-C  \n",
       "12            $9.99         23.09    74498-A  \n",
       "13           $39.99         20.00    41512-E  \n",
       "14           $39.99         20.00    76727-A  \n",
       "15            $7.99         55.59    76977-A  \n",
       "16           $19.99         33.34    73369-A  \n",
       "17            $2.99         50.08    59417-D  \n",
       "18            $7.99         55.59    76797-A  \n",
       "19           $14.99         40.02    76794-A  "
      ]
     },
     "execution_count": 106,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Adding columns\n",
    "\n",
    "price_original = df_hm['price'].str.extract(r\"\\$\\d*\\.\\d*\\s(\\$\\d.*)\", expand=False)\n",
    "df_hm['price_original'] = price_original\n",
    "\n",
    "price_discounted = df_hm['price'].str.extract(r\"(\\$\\d.*)\\s\\$\\d.*\", expand=False)\n",
    "df_hm['price_discounted'] = price_discounted\n",
    "\n",
    "## I created new variables for the stripped original and discounted prices before realizing it's not necessary\n",
    "\n",
    "# df_hm['price_original_strip'] = df_hm['price_original'].str.replace(\"$\", \"\")\n",
    "# df_hm['price_discounted_strip'] = df_hm['price_discounted'].str.replace(\"$\", \"\")\n",
    "# df_hm['pct_discount'] = (pd.to_numeric(df_hm['price_original'].str.replace(\"$\", \"\")) - pd.to_numeric(df_jm['price_discounted'].str.replace(\"$\", \"\"))) / pd.to_numeric(df_hm['price_original'].str.replace(\"$\", \"\")) * 100\n",
    "\n",
    "pct_discount = (pd.to_numeric(price_original.str.replace(\"$\", \"\")) - pd.to_numeric(price_discounted.str.replace(\"$\", \"\"))) / pd.to_numeric(price_original.str.replace(\"$\", \"\")) * 100\n",
    "df_hm['pct_discount'] = round(pct_discount, 2)\n",
    "\n",
    "article_id = df['url'].str.extract(r\".*\\=(.*)\", expand=False)\n",
    "df_hm['article_id'] = article_id\n",
    "\n",
    "df_hm[0:20]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 103,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "df_hm.to_csv(\"hm_cleaned.csv\", index=False)\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# 1.2 Sci-Fi Authors\n",
    "\n",
    "Open up sci-fi.csv, get rid of the \\n on the title and and give me six new columns:\n",
    "\n",
    "avg_rating\n",
    "rating_count\n",
    "total_score\n",
    "score_votes\n",
    "series the series the book belongs to\n",
    "series_no the book in the series that it is\n",
    "For series, I'm talking about e.g. (The Hunger Games, #1) is series \"The Hunter Games\" and series_no 1.\n",
    "\n",
    "Save as sci-fi_cleaned.csv.\n",
    "\n",
    "BONUS: When you make the total_score column, pay close attention to it. If you notice the problem, fix it.\n",
    "\n",
    "BONUS: You don't need these columns to be numbers, but life would be better if they were."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 104,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style>\n",
       "    .dataframe thead tr:only-child th {\n",
       "        text-align: right;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: left;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>full_rating</th>\n",
       "      <th>full_score</th>\n",
       "      <th>rank</th>\n",
       "      <th>title</th>\n",
       "      <th>url</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>4.07 avg rating — 785,502 ratings</td>\n",
       "      <td>\\nscore: 28,539,\\n              and\\n292 peopl...</td>\n",
       "      <td>1</td>\n",
       "      <td>\\nThe Handmaid's Tale\\n</td>\n",
       "      <td>/book/show/38447.The_Handmaid_s_Tale</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>4.34 avg rating — 5,212,935 ratings</td>\n",
       "      <td>\\nscore: 27,566,\\n              and\\n282 peopl...</td>\n",
       "      <td>2</td>\n",
       "      <td>\\nThe Hunger Games (The Hunger Games, #1)\\n</td>\n",
       "      <td>/book/show/2767052-the-hunger-games</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>3.76 avg rating — 922,308 ratings</td>\n",
       "      <td>\\nscore: 20,049,\\n              and\\n205 peopl...</td>\n",
       "      <td>3</td>\n",
       "      <td>\\nFrankenstein, or The Modern Prometheus\\n</td>\n",
       "      <td>/book/show/18490.Frankenstein_or_The_Modern_Pr...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>4.04 avg rating — 702,272 ratings</td>\n",
       "      <td>\\nscore: 17,684,\\n              and\\n185 peopl...</td>\n",
       "      <td>4</td>\n",
       "      <td>\\nA Wrinkle in Time (A Wrinkle in Time Quintet...</td>\n",
       "      <td>/book/show/18131.A_Wrinkle_in_Time</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>4.06 avg rating — 77,664 ratings</td>\n",
       "      <td>\\nscore: 16,070,\\n              and\\n165 peopl...</td>\n",
       "      <td>5</td>\n",
       "      <td>\\nThe Left Hand of Darkness\\n</td>\n",
       "      <td>/book/show/18423.The_Left_Hand_of_Darkness</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                            full_rating  \\\n",
       "0     4.07 avg rating — 785,502 ratings   \n",
       "1   4.34 avg rating — 5,212,935 ratings   \n",
       "2     3.76 avg rating — 922,308 ratings   \n",
       "3     4.04 avg rating — 702,272 ratings   \n",
       "4      4.06 avg rating — 77,664 ratings   \n",
       "\n",
       "                                          full_score  rank  \\\n",
       "0  \\nscore: 28,539,\\n              and\\n292 peopl...     1   \n",
       "1  \\nscore: 27,566,\\n              and\\n282 peopl...     2   \n",
       "2  \\nscore: 20,049,\\n              and\\n205 peopl...     3   \n",
       "3  \\nscore: 17,684,\\n              and\\n185 peopl...     4   \n",
       "4  \\nscore: 16,070,\\n              and\\n165 peopl...     5   \n",
       "\n",
       "                                               title  \\\n",
       "0                            \\nThe Handmaid's Tale\\n   \n",
       "1        \\nThe Hunger Games (The Hunger Games, #1)\\n   \n",
       "2         \\nFrankenstein, or The Modern Prometheus\\n   \n",
       "3  \\nA Wrinkle in Time (A Wrinkle in Time Quintet...   \n",
       "4                      \\nThe Left Hand of Darkness\\n   \n",
       "\n",
       "                                                 url  \n",
       "0               /book/show/38447.The_Handmaid_s_Tale  \n",
       "1                /book/show/2767052-the-hunger-games  \n",
       "2  /book/show/18490.Frankenstein_or_The_Modern_Pr...  \n",
       "3                 /book/show/18131.A_Wrinkle_in_Time  \n",
       "4         /book/show/18423.The_Left_Hand_of_Darkness  "
      ]
     },
     "execution_count": 104,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "contents = open(\"scraped/sci-fi.csv\").read()\n",
    "df_scifi = pd.read_csv(\"scraped/sci-fi.csv\")\n",
    "df_scifi.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 173,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "df_scifi['title'] = df_scifi['title'].str.replace(\"\\n\", \"\")\n",
    "\n",
    "# Add columns\n",
    "\n",
    "df_scifi['avg_rating'] = df_scifi['full_rating'].str.extract(r\"([\\d.]*) avg\", expand=False)\n",
    "\n",
    "df_scifi['rating_count'] = df_scifi['full_rating'].str.extract(\"([\\d,]*) ratings\", expand=False).str.replace(\",\", \"\")\n",
    "\n",
    "df_scifi['total_score'] = df_scifi['full_score'].str.extract(\"\\nscore: ([\\d,]*),\\n\", expand=False).str.replace(\",\", \"\")\n",
    "\n",
    "df_scifi['score_votes'] = df_scifi['full_score'].str.extract(\"([\\d,]*) people\", expand=False).str.replace(\",\", \"\")\n",
    "\n",
    "df_scifi['series'] = df_scifi['title'].str.extract(r\"\\s\\((.*),\\s\\#\\d\\)\", expand=False)\n",
    "\n",
    "df_scifi['series_no'] = df_scifi['title'].str.extract(r\"#(\\d)\", expand=False)\n",
    "\n",
    "df_scifi.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "df_scifi.to_csv(\"sci-fi_cleaned.csv\", index=False)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# 1.3 Where you're just doing work for Stefan\n",
    "Open up all of Stefan's PDFs and read them into a dataframe with the following code. Once that's done, I want you to add the following columns:\n",
    "\n",
    "lawyer_app, the applicant's lawyer (pro se means that they did it themselves, that's fine)\n",
    "lawyer_gov, the government's lawyer\n",
    "judge, the name of the judge\n",
    "access, whether the clearance is granted or denied (although you might miss a few)\n",
    "Save as court_cleaned.csv.\n",
    "\n",
    "Note: You can look at the original PDFs, they're also included.\n",
    "\n",
    "BONUS: You'll be happy once you get the judge, but make sure it doesn't have any extra punctuation on it.\n",
    "\n",
    "BONUS: Search for some words using .str.contains(\"blah\") and save it into new columns. Maybe has_debt, has_bankruptcy, etc."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 125,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "['pdfs/11-11916.h1.pdf.txt',\n",
       " 'pdfs/12-01601.a1.pdf.txt',\n",
       " 'pdfs/11-03073.h1.pdf.txt',\n",
       " 'pdfs/11-04909.h1.pdf.txt',\n",
       " 'pdfs/11-08313.h1.pdf.txt',\n",
       " 'pdfs/12-01969.h1.pdf.txt',\n",
       " 'pdfs/11-02438.h1.pdf.txt',\n",
       " 'pdfs/11-14135.h1.pdf.txt',\n",
       " 'pdfs/11-12635.h1.pdf.txt',\n",
       " 'pdfs/12-00038.h1.pdf.txt',\n",
       " 'pdfs/11-14832.h1.pdf.txt',\n",
       " 'pdfs/11-12537.a1.pdf.txt',\n",
       " 'pdfs/12-01601.h1.pdf.txt',\n",
       " 'pdfs/11-07728.h1.pdf.txt',\n",
       " 'pdfs/12-01787.h1.pdf.txt']"
      ]
     },
     "execution_count": 125,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "import glob\n",
    "\n",
    "filenames = glob.glob(\"pdfs/*.txt\")\n",
    "filenames"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 146,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style>\n",
       "    .dataframe thead tr:only-child th {\n",
       "        text-align: right;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: left;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>contents</th>\n",
       "      <th>filenames</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>...</td>\n",
       "      <td>pdfs/11-11916.h1.pdf.txt</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>KEYWORD: Guideline F\\n\\nDIGEST: Most of the do...</td>\n",
       "      <td>pdfs/12-01601.a1.pdf.txt</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                                            contents                 filenames\n",
       "0                                                ...  pdfs/11-11916.h1.pdf.txt\n",
       "1  KEYWORD: Guideline F\\n\\nDIGEST: Most of the do...  pdfs/12-01601.a1.pdf.txt"
      ]
     },
     "execution_count": 146,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "contents = [open(filename).read() for filename in filenames]\n",
    "df_stefan = pd.DataFrame({'filenames': filenames, 'contents': contents})\n",
    "df_stefan.head(2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 395,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style>\n",
       "    .dataframe thead tr:only-child th {\n",
       "        text-align: right;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: left;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>contents</th>\n",
       "      <th>filenames</th>\n",
       "      <th>lawyer_app</th>\n",
       "      <th>lawyer_gov</th>\n",
       "      <th>judge</th>\n",
       "      <th>access</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>...</td>\n",
       "      <td>pdfs/11-11916.h1.pdf.txt</td>\n",
       "      <td>Pro se</td>\n",
       "      <td>David F. Hayes</td>\n",
       "      <td>Francisco Mendez</td>\n",
       "      <td>denied</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>KEYWORD: Guideline F\\n\\nDIGEST: Most of the do...</td>\n",
       "      <td>pdfs/12-01601.a1.pdf.txt</td>\n",
       "      <td>NaN</td>\n",
       "      <td>James B. Norman</td>\n",
       "      <td>Michael Ra’anan</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>...</td>\n",
       "      <td>pdfs/11-03073.h1.pdf.txt</td>\n",
       "      <td>Mark S. Zaid</td>\n",
       "      <td>Robert J. Kilmartin</td>\n",
       "      <td>Edward W. Loughran</td>\n",
       "      <td>granted</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>...</td>\n",
       "      <td>pdfs/11-04909.h1.pdf.txt</td>\n",
       "      <td>Pro se</td>\n",
       "      <td>Richard Stevens</td>\n",
       "      <td>James F. Duffy</td>\n",
       "      <td>granted</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>...</td>\n",
       "      <td>pdfs/11-08313.h1.pdf.txt</td>\n",
       "      <td>Pro se</td>\n",
       "      <td>Julie R. Mendez</td>\n",
       "      <td>NaN</td>\n",
       "      <td>denied</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>...</td>\n",
       "      <td>pdfs/12-01969.h1.pdf.txt</td>\n",
       "      <td>Pro se</td>\n",
       "      <td>David F. Hayes</td>\n",
       "      <td>PHILIP S. HOWE</td>\n",
       "      <td>denied</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>...</td>\n",
       "      <td>pdfs/11-02438.h1.pdf.txt</td>\n",
       "      <td>Pro se</td>\n",
       "      <td>Stephanie C. Hess</td>\n",
       "      <td>Robert E. Coacher</td>\n",
       "      <td>denied</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>...</td>\n",
       "      <td>pdfs/11-14135.h1.pdf.txt</td>\n",
       "      <td>Pro se</td>\n",
       "      <td>Tara Karoian</td>\n",
       "      <td>James F. Duffy</td>\n",
       "      <td>denied</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>DEPARTMENT OF DEFENSE \\n\\nDEFENSE OFFICE ...</td>\n",
       "      <td>pdfs/11-12635.h1.pdf.txt</td>\n",
       "      <td>Ryan C. Nerney</td>\n",
       "      <td>Richard Stevens</td>\n",
       "      <td>ROBERT ROBINSON GALES</td>\n",
       "      <td>granted</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9</th>\n",
       "      <td>...</td>\n",
       "      <td>pdfs/12-00038.h1.pdf.txt</td>\n",
       "      <td>Pro Se \\n\\n \\n\\nApril 28</td>\n",
       "      <td>Robert Kilmartin</td>\n",
       "      <td>Jennifer I. Goldstein</td>\n",
       "      <td>denied</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>10</th>\n",
       "      <td>...</td>\n",
       "      <td>pdfs/11-14832.h1.pdf.txt</td>\n",
       "      <td>Pro se</td>\n",
       "      <td>Eric Borgstrom</td>\n",
       "      <td>ERIN C. HOGAN</td>\n",
       "      <td>granted</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>11</th>\n",
       "      <td>KEYWORD: Guideline F\\n\\nDIGEST: Applicant’s co...</td>\n",
       "      <td>pdfs/11-12537.a1.pdf.txt</td>\n",
       "      <td>NaN</td>\n",
       "      <td>James B. Norman</td>\n",
       "      <td>Michael Ra’anan</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>12</th>\n",
       "      <td>...</td>\n",
       "      <td>pdfs/12-01601.h1.pdf.txt</td>\n",
       "      <td>Pro se</td>\n",
       "      <td>Tovah Minster</td>\n",
       "      <td>Martin H. Mogul</td>\n",
       "      <td>denied</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>13</th>\n",
       "      <td>DEPARTMENT OF DEFENSE \\n\\n       DEFENSE OF...</td>\n",
       "      <td>pdfs/11-07728.h1.pdf.txt</td>\n",
       "      <td>Mark S. Zaid</td>\n",
       "      <td>Julie R. Mendez</td>\n",
       "      <td>Mark Harvey</td>\n",
       "      <td>granted</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>14</th>\n",
       "      <td>...</td>\n",
       "      <td>pdfs/12-01787.h1.pdf.txt</td>\n",
       "      <td>Stephen Glassman</td>\n",
       "      <td>Erin Thompson</td>\n",
       "      <td>i Garcia</td>\n",
       "      <td>granted</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                                             contents  \\\n",
       "0                                                 ...   \n",
       "1   KEYWORD: Guideline F\\n\\nDIGEST: Most of the do...   \n",
       "2                                                 ...   \n",
       "3                                                 ...   \n",
       "4                                                 ...   \n",
       "5                                                 ...   \n",
       "6                                                 ...   \n",
       "7                                                 ...   \n",
       "8        DEPARTMENT OF DEFENSE \\n\\nDEFENSE OFFICE ...   \n",
       "9                                                 ...   \n",
       "10                                                ...   \n",
       "11  KEYWORD: Guideline F\\n\\nDIGEST: Applicant’s co...   \n",
       "12                                                ...   \n",
       "13     DEPARTMENT OF DEFENSE \\n\\n       DEFENSE OF...   \n",
       "14                                                ...   \n",
       "\n",
       "                   filenames                lawyer_app            lawyer_gov  \\\n",
       "0   pdfs/11-11916.h1.pdf.txt                    Pro se        David F. Hayes   \n",
       "1   pdfs/12-01601.a1.pdf.txt                       NaN       James B. Norman   \n",
       "2   pdfs/11-03073.h1.pdf.txt              Mark S. Zaid   Robert J. Kilmartin   \n",
       "3   pdfs/11-04909.h1.pdf.txt                    Pro se       Richard Stevens   \n",
       "4   pdfs/11-08313.h1.pdf.txt                    Pro se       Julie R. Mendez   \n",
       "5   pdfs/12-01969.h1.pdf.txt                    Pro se        David F. Hayes   \n",
       "6   pdfs/11-02438.h1.pdf.txt                    Pro se     Stephanie C. Hess   \n",
       "7   pdfs/11-14135.h1.pdf.txt                    Pro se          Tara Karoian   \n",
       "8   pdfs/11-12635.h1.pdf.txt            Ryan C. Nerney       Richard Stevens   \n",
       "9   pdfs/12-00038.h1.pdf.txt  Pro Se \\n\\n \\n\\nApril 28      Robert Kilmartin   \n",
       "10  pdfs/11-14832.h1.pdf.txt                    Pro se        Eric Borgstrom   \n",
       "11  pdfs/11-12537.a1.pdf.txt                       NaN       James B. Norman   \n",
       "12  pdfs/12-01601.h1.pdf.txt                    Pro se         Tovah Minster   \n",
       "13  pdfs/11-07728.h1.pdf.txt              Mark S. Zaid       Julie R. Mendez   \n",
       "14  pdfs/12-01787.h1.pdf.txt          Stephen Glassman         Erin Thompson   \n",
       "\n",
       "                    judge   access  \n",
       "0       Francisco Mendez    denied  \n",
       "1         Michael Ra’anan      NaN  \n",
       "2      Edward W. Loughran  granted  \n",
       "3          James F. Duffy  granted  \n",
       "4                     NaN   denied  \n",
       "5          PHILIP S. HOWE   denied  \n",
       "6       Robert E. Coacher   denied  \n",
       "7          James F. Duffy   denied  \n",
       "8   ROBERT ROBINSON GALES  granted  \n",
       "9   Jennifer I. Goldstein   denied  \n",
       "10          ERIN C. HOGAN  granted  \n",
       "11        Michael Ra’anan      NaN  \n",
       "12        Martin H. Mogul   denied  \n",
       "13           Mark Harvey   granted  \n",
       "14              i Garcia   granted  "
      ]
     },
     "execution_count": 395,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Add columns\n",
    "\n",
    "### pdfs/12-01601.a1.pdf.txt and pdfs/11-12537.a1.pdf.txt produced NaNs for \"lawyer_app\" and \"access,\" but I couldn't figure out why\n",
    "\n",
    "df_stefan['lawyer_app'] = df_stefan['contents'].str.extract(r\"F[Oo][Rr] A[Pp][Pp][Ll][Ii][Cc][Aa][Nn][Tt]:?[\\n]* (Pro se|[\\w*\\s.\\w*]*)[\\s*\\,\\n*]\", expand=False)\n",
    "### This produced errors for three documents and I can't figure out why!\n",
    "\n",
    "df_stefan['lawyer_gov'] = df_stefan['contents'].str.extract(r\"F[Oo][Rr] G[Oo][Vv][Ee][Rr][Nn][Mm][Ee][Nn][Tt]:?[\\n]*([\\w*\\s.\\w*]*)\", expand=False)\n",
    "\n",
    "df_stefan['judge'] = df_stefan['contents'].str.extract(r\"([\\w]+[\\s][\\w]*[\\w]*?[\\’]*[\\.]?[\\s]?[\\w]*[\\’]*[\\w]*)[\\s]*[\\n]*Administrative Judge\", expand=False)\n",
    "### Judge Garcia has a middle name with an '. I couldn't figure out how to capture anything before the '. \n",
    "\n",
    "df_stefan['access'] = df_stefan['contents'].str.extract(r\"(Eligibility for access to classified information|Clearance) is (\\w*).\", expand=False)[1]\n",
    "\n",
    "df_stefan[0:15]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "df_stefan.to_csv(\"court_cleaned.csv\", index=False)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# 2.1  Where you're done with Stefan's work but now you're just working for Kat instead\n",
    "Kat is searching for a bunch of words on church web sites using Google. Problem is, she doesn't want to manually poke around all of those sites. Instead, we're going to take advantage of the site: tool on Google to see if any pages on the church domains have the keywords she's looking for.\n",
    "\n",
    "The search she'll want looks something like this:\n",
    "\n",
    "https://www.google.com/search?q=%28Care+OR+\"Mental+Health\"+OR+Depression%29+site%3Athespringscc.org&oq=%28Care+OR+\"Mental+Health\"+OR+Depression%29+site%3Athespringscc.org\n",
    "But it's still a pain to type that in for every church! Instead, we're going to build an HTML file where all she has to do is click and look at the results page instead of actually typing. Yes, it's 1000 things to click, but it's better than 1000 things to type.\n",
    "\n",
    "We want to convert US Church List BY STATE Random 1000.csv into an HTML list, where each church is a link, kind of like this:\n",
    "\n",
    "First church\n",
    "Second church\n",
    "Third church\n",
    "\n",
    "Each link should:\n",
    "\n",
    "1) Be the name of the church\n",
    "2) Have an href that points to the google search above, but with that church's domain name\n",
    "3) Open in a new window when clicked\n",
    "\n",
    "Save the result as church-list.html, and make a list of all of the regular expressions you used for the find+replace below.\n",
    "\n",
    "Note: DO THIS IN YOUR TEXT EDITOR.\n",
    "\n",
    "Note: Don't use regex to add the <ol> and </ol>, that would be silly.\n",
    "\n",
    "HOT TIP: Are your links not working? Your fix is that Google cares about double vs single quotes, but HTML doesn't.\n",
    "\n",
    "HOT TIP: Ain't nothing wrong with deleting columns you aren't interested in. You can do that in Excel.\n",
    "\n",
    "HOT TIP: Might be easier to do this in stages - add the pieces, etc. Maybe not, though, depends on you!"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "# Regex steps:\n",
    "\n",
    "## 1) In Excel, removed all columns except for \"Company Name\" and \"Website\". Then, read into text editor and deleted column names\n",
    "\n",
    "### In text editor:\n",
    "\n",
    "## 2) find: (.*),(\\w*.?\\w*?.(com|org|net|edu|us|church))\n",
    "##     replace: <tr>\n",
    "                #<td><a href='https://www.google.com/search?q=%28Care+OR+\"Mental+Health\"+OR+Depression%29+site%3A\\2&oq=%28Care+OR+\"Mental+Health\"+OR+Depression%29+site%3A\\2' target=\"_blank\">\\1</a></td>\n",
    "                #</tr>\n",
    "\n",
    "## 3) created HTML table to show it in a more organized way.\n",
    "\n",
    "## 4) Note: I know this didn't work perfectly -- the errors appear at the top of the page. \n",
    "         ## I found and manually tweaked entries that didn't convert to HREF format until I couldn't bear it anymore.\n",
    "         ## In particular, I noticed my code was missing domain names ending in \".cc\"."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "collapsed": true
   },
   "source": [
    "# 2.2 Yellow pages, again\n",
    "Open up yellowpages.txt. Find me...\n",
    "\n",
    "Every domain name (might take a couple different searches?)\n",
    "Every address and phone number in Dodgeville\n",
    "Find me everything I can get for free\n",
    "Every dentist\n",
    "Note: No pandas or Sublime Text for this one. You'll probably want to use re.findall, which requires import re.\n",
    "\n",
    "HOT TIP: I gave you the PDF, too, and sometimes that'll be easier to read to get clues about how to do things\n",
    "\n",
    "BONUS: If you're feeling crazy, save each one of these into a separate csv file.\n",
    "\n",
    "In [ ]:\n",
    "\n",
    "​"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 248,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "import re"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 357,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "'YELLOW PAGES INDEX\\nA\\nAccountants . . . . . . . . . . . . . . . . . . . . 1\\nAccountants-Certified Public . . . . . . . . . 1\\nAdult Family Homes . . . . . . . . . . . . . . . 1\\nAdvertising-Agencies & Counselors . . . . 1\\nAdvertising-Directory & Guide . . . . . . . . 2\\nAgricultural Consultants . . . . . . . . . . . . 2\\nAir Conditioning Contractors . . . . . . . . . 2\\nAir Conditioning-Contractors &\\nSystems . . . . . . . . . . . . . . . . . . . . . 2\\nAlcohol Abuse & Addiction Information\\n& Treatment '"
      ]
     },
     "execution_count": 357,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "contents = open(\"yellowpages.txt\").read()\n",
    "contents[0:500]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 391,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Domain names\n",
    "\n",
    "domains = re.findall(r\"(www\\.\\w*\\d*\\.(com|net|org|edu))\", contents)\n",
    "\n",
    "pd.DataFrame([domain[0] for domain in domains])\n",
    "\n",
    "df_domains = pd.DataFrame([domain[0] for domain in domains])\n",
    "\n",
    "df_domains.to_csv(\"yellowpages_domains_cleaned.csv\", index=False)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 392,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Dodgeville addresses and phone numbers\n",
    "\n",
    "pd.DataFrame(re.findall(r\"(\\d.* Dodgeville).*(\\d\\d\\d-\\d\\d\\d-\\d\\d\\d\\d)\", contents))\n",
    "\n",
    "df_dodgeville = pd.DataFrame(re.findall(r\"(\\d.* Dodgeville).*(\\d\\d\\d-\\d\\d\\d-\\d\\d\\d\\d)\", contents))\n",
    "\n",
    "df_dodgeville.to_csv(\"yellowpages_dodgeville_cleaned.csv\", index=False)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 393,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Free stuff\n",
    "\n",
    "pd.DataFrame(re.findall(r\"[Ff][Rr][Ee][Ee] (\\w\\w\\w+[\\s*\\w*]*?)\\n\", contents))\n",
    "df_free_stuff = pd.DataFrame(re.findall(r\"[Ff][Rr][Ee][Ee] (\\w\\w\\w+[\\s*\\w*]*?)\\n\", contents))\n",
    "\n",
    "df_free_stuff.to_csv(\"yellowpages_free_cleaned.csv\", index=False)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 394,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Dentists\n",
    "\n",
    "df_dentists = pd.DataFrame(re.findall(r\"(.*) D.*D.*S.*\", contents))\n",
    "### I know this is missing BURKE TERRY A DR, Fisher Michael C Dr, and Dr Russ Christian, but I couldn't figure out how to do it another way!\n",
    "df_more_dentists = pd.DataFrame(re.findall(r\"(.*Y DENTAL .*)\", contents))\n",
    "\n",
    "## Combine all the dentists I found\n",
    "df_dentists.append(more_dentists)\n",
    "### I know this is missing VILLAGE FAMILY DENTAL ASSOCIATES SC\n",
    "\n",
    "df_dentists.to_csv(\"yellowpages_dentists_cleaned.csv\", index=False)"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.6.3"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
